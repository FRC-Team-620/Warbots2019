// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc620.Warbots2019.elevator;

import java.util.Map;

import com.ctre.phoenix.ParamEnum;
import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import org.usfirst.frc620.Warbots2019.utility.SendableTalonWrapper;

import edu.wpi.first.wpilibj.smartdashboard.SendableBuilder;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class TwoTalonElevator extends Elevator 
{
    private WPI_TalonSRX talon;

    public TwoTalonElevator(int masterCanID, int slaveCanID) 
    {
        talon = new WPI_TalonSRX(masterCanID);
        talon.configFactoryDefault();
        talon.setNeutralMode(NeutralMode.Brake);
        talon.configClearPositionOnLimitR(true, 0);

        WPI_TalonSRX slave = new WPI_TalonSRX(slaveCanID);
        slave.configFactoryDefault();
        slave.setNeutralMode(NeutralMode.Brake);
        slave.follow(talon);

        talon.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder);

        SmartDashboard.putData(new SendableTalonWrapper(talon));
    }

    @Override
    public void drive(double speed) 
    {
        // System.out.println("Driving elevator " + speed);
        if (Math.abs(speed) < 0.1)
            talon.stopMotor();
        else
            talon.set(speed);
    }

    @Override
    public void driveTo(double height) 
    {
        System.out.println("Driving elevator to " + height);
        System.out.println("Error: " + talon.getClosedLoopError());
        System.out.println("Output: " + talon.getMotorOutputPercent());
        talon.set(ControlMode.Position, height);
    }

    @Override
    public double getHeight() 
    {
        return talon.getSelectedSensorPosition();
    }

    @Override
    public boolean isAtTop()
    {
        return talon.getSensorCollection().isFwdLimitSwitchClosed();
    }

    @Override
    public boolean isAtBottom() 
    {
        return talon.getSensorCollection().isRevLimitSwitchClosed();
    }

    @Override
    public void initSendable(SendableBuilder builder)
    {
        builder.addDoubleProperty("height", this::getHeight, null);
        builder.addBooleanProperty("atTop", this::isAtTop, null);
        builder.addBooleanProperty("atBottom", this::isAtBottom, null);
    }
}
